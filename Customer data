{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Francis-Tenakwah/Data-Analyst/blob/main/Customer%20data\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n"
      ],
      "metadata": {
        "id": "tV0rvwqRh9rY"
      },
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "techguy = pd.read_csv('/content/sample_data/Customers.csv')"
      ],
      "metadata": {
        "id": "kcKby7mCiKby"
      },
      "execution_count": 18,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "techguy.head(10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 363
        },
        "id": "J20f0ozDiYsp",
        "outputId": "25b1cc10-9c71-4228-aa3f-14fab164ff55"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   CustomerID  Gender  Age  Annual Income ($)  Spending Score (1-100)  \\\n",
              "0           1    Male   19              15000                      39   \n",
              "1           2    Male   21              35000                      81   \n",
              "2           3  Female   20              86000                       6   \n",
              "3           4  Female   23              59000                      77   \n",
              "4           5  Female   31              38000                      40   \n",
              "5           6  Female   22              58000                      76   \n",
              "6           7  Female   35              31000                       6   \n",
              "7           8  Female   23              84000                      94   \n",
              "8           9    Male   64              97000                       3   \n",
              "9          10  Female   30              98000                      72   \n",
              "\n",
              "      Profession  Work Experience  Family Size  \n",
              "0     Healthcare                1            4  \n",
              "1       Engineer                3            3  \n",
              "2       Engineer                1            1  \n",
              "3         Lawyer                0            2  \n",
              "4  Entertainment                2            6  \n",
              "5         Artist                0            2  \n",
              "6     Healthcare                1            3  \n",
              "7     Healthcare                1            3  \n",
              "8       Engineer                0            3  \n",
              "9         Artist                1            4  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2d3a4bed-e467-4608-ab97-65d140b2da22\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>CustomerID</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Age</th>\n",
              "      <th>Annual Income ($)</th>\n",
              "      <th>Spending Score (1-100)</th>\n",
              "      <th>Profession</th>\n",
              "      <th>Work Experience</th>\n",
              "      <th>Family Size</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>Male</td>\n",
              "      <td>19</td>\n",
              "      <td>15000</td>\n",
              "      <td>39</td>\n",
              "      <td>Healthcare</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>Male</td>\n",
              "      <td>21</td>\n",
              "      <td>35000</td>\n",
              "      <td>81</td>\n",
              "      <td>Engineer</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>Female</td>\n",
              "      <td>20</td>\n",
              "      <td>86000</td>\n",
              "      <td>6</td>\n",
              "      <td>Engineer</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>Female</td>\n",
              "      <td>23</td>\n",
              "      <td>59000</td>\n",
              "      <td>77</td>\n",
              "      <td>Lawyer</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>Female</td>\n",
              "      <td>31</td>\n",
              "      <td>38000</td>\n",
              "      <td>40</td>\n",
              "      <td>Entertainment</td>\n",
              "      <td>2</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>6</td>\n",
              "      <td>Female</td>\n",
              "      <td>22</td>\n",
              "      <td>58000</td>\n",
              "      <td>76</td>\n",
              "      <td>Artist</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>7</td>\n",
              "      <td>Female</td>\n",
              "      <td>35</td>\n",
              "      <td>31000</td>\n",
              "      <td>6</td>\n",
              "      <td>Healthcare</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>8</td>\n",
              "      <td>Female</td>\n",
              "      <td>23</td>\n",
              "      <td>84000</td>\n",
              "      <td>94</td>\n",
              "      <td>Healthcare</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>9</td>\n",
              "      <td>Male</td>\n",
              "      <td>64</td>\n",
              "      <td>97000</td>\n",
              "      <td>3</td>\n",
              "      <td>Engineer</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>10</td>\n",
              "      <td>Female</td>\n",
              "      <td>30</td>\n",
              "      <td>98000</td>\n",
              "      <td>72</td>\n",
              "      <td>Artist</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2d3a4bed-e467-4608-ab97-65d140b2da22')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-2d3a4bed-e467-4608-ab97-65d140b2da22 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-2d3a4bed-e467-4608-ab97-65d140b2da22');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-90c5086c-079e-434c-b6ca-787a0153b7de\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-90c5086c-079e-434c-b6ca-787a0153b7de')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-90c5086c-079e-434c-b6ca-787a0153b7de button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "techguy",
              "summary": "{\n  \"name\": \"techguy\",\n  \"rows\": 2000,\n  \"fields\": [\n    {\n      \"column\": \"CustomerID\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 577,\n        \"min\": 1,\n        \"max\": 2000,\n        \"num_unique_values\": 2000,\n        \"samples\": [\n          1861,\n          354,\n          1334\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Female\",\n          \"Male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 28,\n        \"min\": 0,\n        \"max\": 99,\n        \"num_unique_values\": 100,\n        \"samples\": [\n          90,\n          62\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Annual Income ($)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 45739,\n        \"min\": 0,\n        \"max\": 189974,\n        \"num_unique_values\": 1786,\n        \"samples\": [\n          162465,\n          124256\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Spending Score (1-100)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 27,\n        \"min\": 0,\n        \"max\": 100,\n        \"num_unique_values\": 101,\n        \"samples\": [\n          0,\n          11\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Profession\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 9,\n        \"samples\": [\n          \"Homemaker\",\n          \"Engineer\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Work Experience\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 0,\n        \"max\": 17,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          1,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Family Size\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 9,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          7,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "techguy.tail(10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 363
        },
        "id": "2VAUd7oYilwb",
        "outputId": "41522f6f-4e3b-406f-8125-6559ca010470"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      CustomerID  Gender  Age  Annual Income ($)  Spending Score (1-100)  \\\n",
              "1990        1991  Female   30             166983                      69   \n",
              "1991        1992  Female   97             129444                      96   \n",
              "1992        1993    Male   94             181183                      24   \n",
              "1993        1994  Female   64             175254                     100   \n",
              "1994        1995  Female   19              54121                      89   \n",
              "1995        1996  Female   71             184387                      40   \n",
              "1996        1997  Female   91              73158                      32   \n",
              "1997        1998    Male   87              90961                      14   \n",
              "1998        1999    Male   77             182109                       4   \n",
              "1999        2000    Male   90             110610                      52   \n",
              "\n",
              "         Profession  Work Experience  Family Size  \n",
              "1990         Artist                7            3  \n",
              "1991  Entertainment                5            6  \n",
              "1992      Marketing                9            3  \n",
              "1993         Artist                9            5  \n",
              "1994       Engineer                6            3  \n",
              "1995         Artist                8            7  \n",
              "1996         Doctor                7            7  \n",
              "1997     Healthcare                9            2  \n",
              "1998      Executive                7            2  \n",
              "1999  Entertainment                5            2  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-91565734-8ac5-4dc8-8bd1-39d0d866eacb\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>CustomerID</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Age</th>\n",
              "      <th>Annual Income ($)</th>\n",
              "      <th>Spending Score (1-100)</th>\n",
              "      <th>Profession</th>\n",
              "      <th>Work Experience</th>\n",
              "      <th>Family Size</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1990</th>\n",
              "      <td>1991</td>\n",
              "      <td>Female</td>\n",
              "      <td>30</td>\n",
              "      <td>166983</td>\n",
              "      <td>69</td>\n",
              "      <td>Artist</td>\n",
              "      <td>7</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1991</th>\n",
              "      <td>1992</td>\n",
              "      <td>Female</td>\n",
              "      <td>97</td>\n",
              "      <td>129444</td>\n",
              "      <td>96</td>\n",
              "      <td>Entertainment</td>\n",
              "      <td>5</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1992</th>\n",
              "      <td>1993</td>\n",
              "      <td>Male</td>\n",
              "      <td>94</td>\n",
              "      <td>181183</td>\n",
              "      <td>24</td>\n",
              "      <td>Marketing</td>\n",
              "      <td>9</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1993</th>\n",
              "      <td>1994</td>\n",
              "      <td>Female</td>\n",
              "      <td>64</td>\n",
              "      <td>175254</td>\n",
              "      <td>100</td>\n",
              "      <td>Artist</td>\n",
              "      <td>9</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1994</th>\n",
              "      <td>1995</td>\n",
              "      <td>Female</td>\n",
              "      <td>19</td>\n",
              "      <td>54121</td>\n",
              "      <td>89</td>\n",
              "      <td>Engineer</td>\n",
              "      <td>6</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1995</th>\n",
              "      <td>1996</td>\n",
              "      <td>Female</td>\n",
              "      <td>71</td>\n",
              "      <td>184387</td>\n",
              "      <td>40</td>\n",
              "      <td>Artist</td>\n",
              "      <td>8</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1996</th>\n",
              "      <td>1997</td>\n",
              "      <td>Female</td>\n",
              "      <td>91</td>\n",
              "      <td>73158</td>\n",
              "      <td>32</td>\n",
              "      <td>Doctor</td>\n",
              "      <td>7</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1997</th>\n",
              "      <td>1998</td>\n",
              "      <td>Male</td>\n",
              "      <td>87</td>\n",
              "      <td>90961</td>\n",
              "      <td>14</td>\n",
              "      <td>Healthcare</td>\n",
              "      <td>9</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1998</th>\n",
              "      <td>1999</td>\n",
              "      <td>Male</td>\n",
              "      <td>77</td>\n",
              "      <td>182109</td>\n",
              "      <td>4</td>\n",
              "      <td>Executive</td>\n",
              "      <td>7</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1999</th>\n",
              "      <td>2000</td>\n",
              "      <td>Male</td>\n",
              "      <td>90</td>\n",
              "      <td>110610</td>\n",
              "      <td>52</td>\n",
              "      <td>Entertainment</td>\n",
              "      <td>5</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-91565734-8ac5-4dc8-8bd1-39d0d866eacb')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-91565734-8ac5-4dc8-8bd1-39d0d866eacb button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-91565734-8ac5-4dc8-8bd1-39d0d866eacb');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-7333064c-f889-409a-bb2e-47fdb0d74d17\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7333064c-f889-409a-bb2e-47fdb0d74d17')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-7333064c-f889-409a-bb2e-47fdb0d74d17 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"techguy\",\n  \"rows\": 10,\n  \"fields\": [\n    {\n      \"column\": \"CustomerID\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 1991,\n        \"max\": 2000,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          1999,\n          1992,\n          1996\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Male\",\n          \"Female\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 27,\n        \"min\": 19,\n        \"max\": 97,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          77,\n          97\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Annual Income ($)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 49849,\n        \"min\": 54121,\n        \"max\": 184387,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          182109,\n          129444\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Spending Score (1-100)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 34,\n        \"min\": 4,\n        \"max\": 100,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          4,\n          96\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Profession\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"Artist\",\n          \"Entertainment\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Work Experience\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 5,\n        \"max\": 9,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          5,\n          8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Family Size\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 2,\n        \"max\": 7,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          6,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "age_counts = techguy['Age'].value_counts()\n",
        "plt.bar(age_counts.index, age_counts.values)\n",
        "plt.xlabel('Age')\n",
        "plt.ylabel('Count')\n",
        "plt.title('Age Distribution')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "64gpPswTivQV",
        "outputId": "2e62797e-9b03-48a1-a464-c1c3facf44a3"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "gender_counts = techguy['Gender'].value_counts()\n",
        "plt.pie(gender_counts, labels=gender_counts.index, autopct='%1.1f%%')\n",
        "plt.title('Gender Distribution')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 428
        },
        "id": "XVMMpI-kjbIW",
        "outputId": "6549139c-9a4a-4c39-d70e-9c672eacf503"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "profession_counts = techguy['Profession'].value_counts()\n",
        "plt.bar(profession_counts.index, profession_counts.values)\n",
        "plt.xlabel('Profession')\n",
        "plt.ylabel('Count')\n",
        "plt.title('Profession Distribution')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "u-UP7Qkujorz",
        "outputId": "dabb0b48-ef73-414e-9667-254a1928702d"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}